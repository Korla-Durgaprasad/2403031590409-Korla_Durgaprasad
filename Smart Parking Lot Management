import time

# Node structure for linked list (represents a car)
class CarNode:
    def __init__(self, car_number):
        self.car_number = car_number
        self.entry_time = time.strftime("%Y-%m-%d %H:%M:%S")
        self.next = None


# Parking Lot using Linked List
class ParkingLot:
    def __init__(self, capacity):
        self.capacity = capacity   # total slots
        self.size = 0              # current cars
        self.head = None           # linked list head

    # Insert at end (Car entry)
    def park_car(self, car_number):
        if self.size >= self.capacity:
            print(f"🚫 Parking FULL! Car {car_number} denied entry.")
            return

        new_car = CarNode(car_number)

        if not self.head:  # first car
            self.head = new_car
        else:
            temp = self.head
            while temp.next:   # traverse till last node
                temp = temp.next
            temp.next = new_car

        self.size += 1
        print(f"✅ Car {car_number} parked at {new_car.entry_time}.")

    # Delete node (Car exit)
    def remove_car(self, car_number):
        if not self.head:
            print("🚫 Parking lot empty. No cars to remove.")
            return

        temp = self.head
        prev = None

        # Search for car
        while temp and temp.car_number != car_number:
            prev = temp
            temp = temp.next

        if not temp:
            print(f"❌ Car {car_number} not found.")
            return

        # Remove node
        if prev:
            prev.next = temp.next
        else:
            self.head = temp.next

        self.size -= 1
        print(f"🚗 Car {car_number} exited. Entry time was {temp.entry_time}.")

    # Display linked list
    def display_cars(self):
        if not self.head:
            print("🅿️ Parking lot is empty.")
            return

        print("\n--- Active Parked Cars ---")
        temp = self.head
        while temp:
            print(f"Car {temp.car_number} | Parked at: {temp.entry_time}")
            temp = temp.next
        print(f"Total Cars: {self.size}/{self.capacity}")


# -------------------------
# Menu-Driven Program
# -------------------------
if __name__ == "__main__":
    n = int(input("Enter parking lot capacity: "))
    lot = ParkingLot(capacity=n)

    while True:
        print("\n=== Smart Parking Lot Menu ===")
        print("1. Park a Car")
        print("2. Remove a Car")
        print("3. Display Parked Cars")
        print("4. Exit Program")

        choice = input("Enter choice: ")

        if choice == "1":
            car_no = input("Enter Car Number: ")
            lot.park_car(car_no)

        elif choice == "2":
            car_no = input("Enter Car Number to remove: ")
            lot.remove_car(car_no)

        elif choice == "3":
            lot.display_cars()

        elif choice == "4":
            print("✅ Exiting... Thank you!")
            break

        else:
            print("❌ Invalid choice. Try again.")
